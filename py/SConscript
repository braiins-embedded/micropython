Import('env')

# py object files
env.FeatureObject(source=['mpstate.c',
                          'nlrx86.S',
                          'nlrx64.S',
                          'nlrthumb.S',
                          'nlrxtensa.S',
                          'nlrsetjmp.c',
                          'malloc.c',
                          'qstr.c',
                          'vstr.c',
                          'mpprint.c',
                          'unicode.c',
                          'mpz.c',
                          'lexer.c',
                          'lexerstr.c',
                          'lexerunix.c',
                          'parse.c',
                          'scope.c',
                          'compile.c',
                          'emitcommon.c',
                          'emitbc.c',
                          'asmx64.c',
                          'asmx86.c',
                          'asmthumb.c',
                          'emitinlinethumb.c',
                          'asmarm.c',
                          'formatfloat.c',
                          'parsenumbase.c',
                          'parsenum.c',
                          'emitglue.c',
                          'runtime.c',
                          'nativeglue.c',
                          'stackctrl.c',
                          'argcheck.c',
                          'warning.c',
                          'map.c',
                          'obj.c',
                          'objarray.c',
                          'objattrtuple.c',
                          'objbool.c',
                          'objboundmeth.c',
                          'objcell.c',
                          'objclosure.c',
                          'objcomplex.c',
                          'objdict.c',
                          'objenumerate.c',
                          'objexcept.c',
                          'objfilter.c',
                          'objfloat.c',
                          'objfun.c',
                          'objgenerator.c',
                          'objgetitemiter.c',
                          'objint.c',
                          'objint_longlong.c',
                          'objint_mpz.c',
                          'objlist.c',
                          'objmap.c',
                          'objmodule.c',
                          'objobject.c',
                          'objpolyiter.c',
                          'objproperty.c',
                          'objnone.c',
                          'objnamedtuple.c',
                          'objrange.c',
                          'objreversed.c',
                          'objset.c',
                          'objsingleton.c',
                          'objslice.c',
                          'objstr.c',
                          'objstrunicode.c',
                          'objstringio.c',
                          'objtuple.c',
                          'objtype.c',
                          'objzip.c',
                          'opmethods.c',
                          'sequence.c',
                          'stream.c',
                          'binary.c',
                          'builtinimport.c',
                          'builtinevex.c',
                          'modarray.c',
                          'modbuiltins.c',
                          'modcollections.c',
                          'modgc.c',
                          'modio.c',
                          'modmath.c',
                          'modcmath.c',
                          'modmicropython.c',
                          'modstruct.c',
                          'modsys.c',
                          'bc.c',
                          'showbc.c',
                          'repl.c',
                          'smallint.c',
                          'frozenmod.c'])

env.FeatureObject(target='emitnx64.o', source='emitnative.c',
                  CPPDEFINES='N_X64')
env.FeatureObject(target='emitnx86.o', source='emitnative.c',
                  CPPDEFINES='N_X86')
env.FeatureObject(target='emitnthumb.o', source='emitnative.c',
                  CPPDEFINES='N_THUMB')
env.FeatureObject(target='emitnarm.o', source='emitnative.c',
                  CPPDEFINES='N_ARM')

# Some code is performance bottleneck and compiled with other
# optimization options.
#
# Optimising gc for speed; 5ms down to 4ms on pybv2
#
# Optimising vm for speed, adds only a small amount to code size but
# makes a huge difference to speed (20% faster)
env.FeatureObject(source=['gc.c', 'vm.c'], CCFLAGS_OPT='-O3')


# Optimizing vm.o for modern deeply pipelined CPUs with branch predictors
# may require disabling tail jump optimization. This will make sure that
# each opcode has its own dispatching jump which will improve branch
# branch predictor efficiency.
# http://article.gmane.org/gmane.comp.lang.lua.general/75426
# http://hg.python.org/cpython/file/b127046831e2/Python/ceval.c#l828
# http://www.emulators.com/docs/nx25_nostradamus.htm
# -fno-crossjumping
